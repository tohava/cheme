(decl ((func any) read_all_terms_as_any))
(decl ((func int int) putchar))

(var  
 ((func bool bool) mnot (lambda ((bool b)) (if b false true)))
 
 ((func int unit) putint 
  (lambda ((int z))
	(if (== z 0)
		(begin (putchar 48) unitv)
		(begin
		  (var ((func int unit) worker 
				(lambda ((int x))
				  (if (== x 0)
					  unitv
					  (begin
						(var (int z (mod x 10)))
						(worker (div x 10))
						(putchar (+ 48 z)) unitv)))))
		  (worker z)))))
 ((func (func char unit) (ptr char) unit) str_foreach
  (lambda (((func char unit) f) 
		   ((ptr char) s))
	(while (mnot (char_eq (ind s) '\0'))
		   (begin
			 (f (ind s))
			 (<- (ref s) (ptr_add s 1))))))

 ((func (ptr char) unit) putstr
  (lambda (((ptr char) s))
	(str_foreach (lambda ((char c)) (putchar (char2int c)) unitv) s)))


 ((func char unit) put_escaped_char
  (lambda ((char c))
	(if (char_eq c '\n') (putstr "\\n" ) 
	(if (char_eq c '\0') (putstr "\\0" )
	(if (char_eq c '\"') (putstr "\\\"")
	(if (char_eq c '\\') (putstr "\\\\")
	               		 (begin (putchar (char2int c)) unitv)))))))
 
 ((func (ptr char) unit) put_escaped_str
  (lambda (((ptr char) s))
	(str_foreach put_escaped_char s)))
	
 ((ptr anylist) nil)
 ((func any (ptr anylist)) a2l (lambda ((any a)) (any_to (ptr anylist) a)))
 ((func any int)           a2i (lambda ((any a)) (any_to int           a)))

 ((func any (ptr anylist) (ptr anylist)) cons
  (lambda ((any a) ((ptr anylist) b))	
	(var ((ptr anylist) p (new anylist)))
	(<- p (pack anylist (tupv a b)))
	p))
 
 ((func (ptr anylist) any) car 
  (lambda (((ptr anylist) l))
	(at (unpack (ind l)) 0)))
 
 ((func (ptr anylist) (ptr anylist)) cdr
  (lambda (((ptr anylist) l))
	(at (unpack (ind l)) 1)))

 ((func (func any any) (ptr anylist) (ptr anylist)) map
  (lambda ( ((func any any) f) 
			((ptr anylist)  l) )
	(if (is_null l) nil (cons (f (car l)) (map f (cdr l))))))

 ((func (func any any any) any (ptr anylist) (ptr anylist)) mapp
  (lambda ( ((func any any any) f)
			(any param)
			((ptr anylist)  l) )
	(if (is_null l) nil (cons (f param (car l)) (mapp f param (cdr l))))))

 ((func any any) display 
  (lambda ((any a))
	(if (any_is char          a)
		(begin
		  (putstr "'") (put_escaped_char (any_to char a)) (putstr "'") 
		  unitv)
	(if (any_is (ptr char)    a)
		(begin
		  (putstr "\"") (put_escaped_str (any_to (ptr char) a)) (putstr "\"")
		  unitv)
    (if (any_is int           a)
		(begin (putint (any_to int a)) unitv)
    (if (any_is sym           a)
		(putstr (sym_str (any_to sym a)))
    (if (any_is (ptr anylist) a)
		(begin
		  (putchar 40)
		  (map (lambda ((any a)) (display a) (putstr " ") a) 
			   (any_to (ptr anylist) a))
		  (putchar 41)
		  unitv)
		(begin (putstr "<UNDISPLAYABLE>") unitv))))))
	a))
 
 ((func any (ptr char)) any2symstr
  (lambda ((any a))
	(if (any_is sym a) (sym_str (any_to sym a)) "")))
  

 ((func any (ptr char)) first_word
  (lambda ((any a))
	(if (any_is (ptr anylist) a) (any2symstr (car (a2l a))) "")))

 ((func any bool) is_cspecial 
  (lambda ((any a))
	(char_eq (ind (first_word a)) ':')))

 ((func any bool) is_wild
  (lambda ((any a))
	(and (any_is sym a)
		 (str_eq (any2symstr a) "?"))))

 ((func any (ptr char) bool) is_sym
  (lambda ((any a) ((ptr char) w) )
	(and (any_is sym a)
		 (str_eq (any2symstr a) w)))) 

 ((func any bool) is_cspecial_empty
  (lambda ((any a))
	(and (is_cspecial a) (str_eq (first_word a) ":"))))

 ((func any (ptr char)) get_cspecial
  (lambda ((any a))
	(ptr_add (first_word a) 1)))

 ((func any any bool) any_compare
  (lambda ((any a) (any b))
	(var ((func (ptr anylist) (ptr anylist) bool) compare_lists
		  (lambda (((ptr anylist) a) ((ptr anylist) b))
			(if (and (is_null a) (is_null b)) true
			(if      (is_null a)              false
            (if                  (is_null b)  false
            
				        (and 
						 (any_compare (car a) (car b))
						 (compare_lists (cdr a) (cdr b)))))))))
	(and
	 (type_desc_eq (any_type (ref a)) (any_type (ref b)))
	 (if (any_is (ptr char) a)
			(str_eq (any_to (ptr char) a) (any_to (ptr char) b))
     (if (any_is sym a)
            (sym_eq (any_to sym a) (any_to sym b))
     (if (any_is anylist a)
			(compare_lists (a2l a) (a2l b))
	 		(any_eq (ref a) (ref b) )))))))

 ((func (func any bool) (ptr anylist) (ptr anylist)) filter
  (lambda ( ((func any bool) f) 
			((ptr anylist)   l) )
	(if (f (car l)) 
		(cons (car l) (filter f (cdr l)))
		(filter f (cdr l)))))

)

 
(type_pack (ptr anylist) basic_index)
(var
 ((func basic_index) new_basic_index
  (lambda ()
	(pack basic_index (cons (to_any 0) nil))))
 ((func basic_index) new_root_basic_index
  (lambda ()
	(pack basic_index nil)))
 ((func basic_index basic_index) basic_index_next
  (lambda ((basic_index b))
	(pack basic_index (cons 
					   (to_any 
						(+ 1 (a2i (car (unpack b))))) 
					   (cdr (unpack b))))))
 ((func basic_index basic_index) basic_index_in
  (lambda ((basic_index b))
	(pack basic_index (cons (to_any 0) (unpack b))))))

(type_pack (ptr (tup any basic_index)) iterm)
(var
 ((func iterm any) itt     
  (lambda ((iterm it)) (at (ind (unpack it)) 0)))
 ((func iterm basic_index) iti
  (lambda ((iterm it)) (at (ind (unpack it)) 1)))
 ((func any basic_index iterm) itv 
  (lambda ((any a) (basic_index b)) 
	(var ((ptr (tup any basic_index)) p (new (tup any basic_index))))
	(<- p (tupv a b))
	(pack iterm p))))

(var ((func (ptr anylist) (ptr anylist)) terms_to_iterms
	  (lambda (((ptr anylist) l))
		(var ((func (ptr anylist) basic_index (ptr anylist)) raw
			  (lambda (((ptr anylist) l)
					   (basic_index   b))
				(if (is_null l) nil
					(begin
					  (var (any top (car l)))
					  (var (any newtop 
								(if (any_is (ptr anylist) top)
									(to_any (raw (a2l top) (basic_index_in b)))
									top)))
					  (cons (to_any (itv newtop b)) 
							(raw (cdr l) (basic_index_next b))))))))
		(raw l (new_basic_index)))))
					
	   

(var ((func any any bool) match		   
	  (lambda ((any expr) (any data))
		(if (is_wild expr)
			true
		(if (or (mnot (any_is (ptr anylist) expr))
				(mnot (any_is (ptr anylist) data)))
			(any_compare expr data)

			(begin
			  (var ((ptr anylist) el  (a2l expr))
				   ((ptr anylist) dl  (a2l data))
				   (any           el1 (if (is_null el) (to_any nil) (car el))))
			  (if (is_null el) 
				  (is_null dl)
			  (if (and (is_cspecial el1) (str_eq (get_cspecial el1) "b*"))
				  (or (match (to_any (cdr el)) (to_any dl))
					  (begin (var (any param (car (cdr (a2l el1)))))
					    (and (mnot (is_null dl))
							 (match param (car dl))
							 (match expr  (to_any (cdr dl))))))

			  (if (is_null dl)
				  false

                  (and (match (car el)          (car dl))
					   (match (to_any (cdr el)) (to_any (cdr dl))))))))))))
	 
	 ((func (ptr anylist) any) cond2if
	  (lambda (((ptr anylist) l))
		(var ((func (ptr anylist) any) raw
			  (lambda (((ptr anylist) l))
				(var (any           x (car      (a2l (car l))))
					 (any           y (car (cdr (a2l (car l))))))
				(if (is_sym x "else") 
					y 
					(to_any (cons (quote if)
								  (cons x (cons y (cons (raw (cdr l)) 
														nil)))))))))
		(raw (cdr l))))

	 ((func (func any any) any any) deepmap
	  (lambda (((func any any) f) (any a))
		(f (if (any_is (ptr anylist) a)
			   (begin
				 (to_any (mapp (lambda ((any f) (any a))
								 (deepmap (any_to (func any any) f) a))
							   (to_any f) 
							   (any_to (ptr anylist) a))))
			   a)))))


(var (any all (read_all_terms_as_any)))
(var ((ptr anylist) 
	  result 
	  (any_to (ptr anylist)
			  (deepmap (lambda ((any a)) 
						 (var (any cond_expr
								   (to_any (cons 
											(quote cond)
											(any_to (ptr anylist)
													(quote ((:b* (? ?)) 
															(else ?))))))))
						 (if (match cond_expr a)
							 (cond2if (any_to (ptr anylist) a)) 
							 a)) all))))
(map display result)

